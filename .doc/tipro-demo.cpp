#include <gtk/gtk.h>

// global counter
int nCounter;

// button structures
typedef struct
{
  GtkStatusbar* status_bar;
  guint main_app_ctx;
  int btn_int_data;
  GSubprocess* subprocess;
  GtkWidget* widget;
  GtkBuilder* builder;
} btn_struct;

// button functions
static void complicated_quit (GtkWidget *widget, gpointer data)
{
  nCounter++;
  if (nCounter>25) gtk_main_quit();
}

static void call_stopped (GObject* source_object, GAsyncResult* res, gpointer data)
{
  btn_struct* pbtn_call_struct = (btn_struct*)data;
  gtk_statusbar_push(pbtn_call_struct->status_bar,pbtn_call_struct->main_app_ctx,"Call ended.");
  gtk_button_set_label(GTK_BUTTON(pbtn_call_struct->widget),"Call");
  pbtn_call_struct->btn_int_data = 0;
}

static void process_call (GtkWidget *widget, gpointer data)
{
#if 1
  GError *error = NULL; /* This contains and error that MAY be generated by the gio functions. */
  GSubprocess *process;
  btn_struct* pbtn_call_struct = (btn_struct*)data;

  if (pbtn_call_struct->btn_int_data > 0)
  {
    if (pbtn_call_struct->subprocess !=NULL)
    {
      g_subprocess_force_exit(pbtn_call_struct->subprocess);
    }
  }
  else
  {
    process = g_subprocess_new(G_SUBPROCESS_FLAGS_NONE, &error, "aplay", "SpeechL.wav", NULL);
    if (process!=NULL)
    {
      gtk_statusbar_push(pbtn_call_struct->status_bar,pbtn_call_struct->main_app_ctx,"Calling...");
      pbtn_call_struct->subprocess = process;
      pbtn_call_struct->btn_int_data = 1;
      pbtn_call_struct->widget = widget;
      gtk_button_set_label(GTK_BUTTON(widget),"Stop Call");
      g_subprocess_wait_async(process, NULL, call_stopped, pbtn_call_struct);
    }
    else
    {
      gtk_statusbar_push(pbtn_call_struct->status_bar,pbtn_call_struct->main_app_ctx,"Could not establish call!");
    }
  }
#else
  int nResult;
  btn_struct* pbtn_play_struct = (btn_struct*)data;
  gtk_statusbar_push(pbtn_play_struct->status_bar,pbtn_play_struct->main_app_ctx,"Call in progress...");
  nResult = system("aplay -d 6 SpeechL.wav");
  gtk_statusbar_push(pbtn_play_struct->status_bar,pbtn_play_struct->main_app_ctx,"Call ended.");
#endif
}

static void music_stopped (GObject* source_object, GAsyncResult* res, gpointer data)
{
  btn_struct* pbtn_play_struct = (btn_struct*)data;
  gtk_statusbar_push(pbtn_play_struct->status_bar,pbtn_play_struct->main_app_ctx,"Stopped playing music.");
  gtk_button_set_label(GTK_BUTTON(pbtn_play_struct->widget),"Play Music");
  gtk_button_set_image(GTK_BUTTON(pbtn_play_struct->widget),GTK_WIDGET(gtk_builder_get_object(pbtn_play_struct->builder, "img_play")));
  pbtn_play_struct->btn_int_data = 0;
}

static void play_music (GtkWidget *widget, gpointer data)
{
  GError *error = NULL; /* This contains and error that MAY be generated by the gio functions. */
  GSubprocess *process;
  btn_struct* pbtn_play_struct = (btn_struct*)data;

  if (pbtn_play_struct->btn_int_data > 0)
  {
    if (pbtn_play_struct->subprocess !=NULL)
    {
      g_subprocess_force_exit(pbtn_play_struct->subprocess);
    }
  }
  else
  {
    process = g_subprocess_new(G_SUBPROCESS_FLAGS_NONE, &error, "aplay", "Waltz.wav", NULL);
    if (process!=NULL)
    {
      gtk_statusbar_push(pbtn_play_struct->status_bar,pbtn_play_struct->main_app_ctx,"Playing music...");
      pbtn_play_struct->subprocess = process;
      pbtn_play_struct->btn_int_data = 1;
      pbtn_play_struct->widget = widget;
      gtk_button_set_label(GTK_BUTTON(widget),"Stop Music");
      gtk_button_set_image(GTK_BUTTON(widget),GTK_WIDGET(gtk_builder_get_object(pbtn_play_struct->builder, "img_stop")));
      g_subprocess_wait_async(process, NULL, music_stopped, pbtn_play_struct);
    }
    else
    {
      gtk_statusbar_push(pbtn_play_struct->status_bar,pbtn_play_struct->main_app_ctx,"Could not play music!");
    }
  }
}

static void sound_alarm (GtkWidget *widget, gpointer data)
{
  btn_struct* pbtn_alarm_struct = (btn_struct*)data;
  int nResult;
  nResult = system("aplay -d 1 Gong.wav &");
}

static void operate_doors (GtkWidget *widget, gpointer data)
{
  btn_struct* pbtn_door_struct = (btn_struct*)data;
  if (pbtn_door_struct->btn_int_data > 0)
  {
    g_print ("Doors Closed\n");
    pbtn_door_struct->btn_int_data = 0;
    gtk_button_set_label(GTK_BUTTON(widget),"Open Doors");
    gtk_button_set_image(GTK_BUTTON(widget),GTK_WIDGET(gtk_builder_get_object(pbtn_door_struct->builder, "img_open")));
    gtk_statusbar_push(pbtn_door_struct->status_bar,pbtn_door_struct->main_app_ctx,"Doors closed!");
  }
  else
  {
    g_print ("Doors Opened\n");
    pbtn_door_struct->btn_int_data = 1;
    gtk_button_set_label(GTK_BUTTON(widget),"Close Doors");
    gtk_button_set_image(GTK_BUTTON(widget),GTK_WIDGET(gtk_builder_get_object(pbtn_door_struct->builder, "img_close")));
    gtk_statusbar_push(pbtn_door_struct->status_bar,pbtn_door_struct->main_app_ctx,"Doors opened!");
  }
}

static gboolean clean_statusbar (gpointer data)
{
  gtk_statusbar_remove_all(GTK_STATUSBAR(data),0);
  nCounter = 0;
  return 0;
}

/* Clean statusbar each 2 seconds */
static void pushed_to_statusbar(GtkWidget *widget, gpointer data)
{
  g_timeout_add_seconds(2,clean_statusbar,widget);
}

int main (int argc, char *argv[])
{
  GtkBuilder *builder;
  GObject *window;
  GObject *button;
  GObject *logo;
  GtkStatusbar *status_bar;
  GError *error = NULL;
  GtkStyleContext *style_context;
  GtkCssProvider *css_provider;

  btn_struct btn_alarm_struct;
  btn_struct btn_door_struct;
  btn_struct btn_call_struct;
  btn_struct btn_play_struct;
 

  gtk_init (&argc, &argv);

  nCounter = 0;

  /* Construct a GtkBuilder instance and load our UI description */
  builder = gtk_builder_new ();
  if (gtk_builder_add_from_file (builder, "tipro-demo.ui", &error) == 0)
  {
    g_printerr ("Error loading file: %s\n", error->message);
    g_clear_error (&error);
    return 1;
  }

  /* Initialize status bar and context ids */
  status_bar = GTK_STATUSBAR(gtk_builder_get_object (builder, "status_bar"));
  //guint main_app_ctx = gtk_statusbar_get_context_id (status_bar,"MainAppCtx");
  // currently not using context
  guint main_app_ctx = 0;
  g_signal_connect (status_bar, "text-pushed", G_CALLBACK (pushed_to_statusbar), NULL);
  //gtk_statusbar_push(status_bar,main_app_ctx,"Started...");

  /* Initialize button data structures */
  btn_alarm_struct.btn_int_data = 0;
  btn_alarm_struct.status_bar = status_bar;
  btn_alarm_struct.main_app_ctx = main_app_ctx;
  btn_alarm_struct.builder = builder;

  btn_door_struct.btn_int_data = 0;
  btn_door_struct.status_bar = status_bar;
  btn_door_struct.main_app_ctx = main_app_ctx;
  btn_door_struct.builder = builder;

  btn_call_struct.btn_int_data = 0;
  btn_call_struct.status_bar = status_bar;
  btn_call_struct.main_app_ctx = main_app_ctx;
  btn_call_struct.builder = builder;

  btn_play_struct.btn_int_data = 0;
  btn_play_struct.status_bar = status_bar;
  btn_play_struct.main_app_ctx = main_app_ctx;
  btn_play_struct.builder = builder;

  /* Connect signal handlers to the constructed widgets. */
  window = gtk_builder_get_object (builder, "main_window");
  g_signal_connect (window, "destroy", G_CALLBACK (gtk_main_quit), NULL);

  button = gtk_builder_get_object (builder, "btn_doors");
  g_signal_connect (button, "clicked", G_CALLBACK (operate_doors), &btn_door_struct);

  button = gtk_builder_get_object (builder, "btn_alarm");
  g_signal_connect (button, "clicked", G_CALLBACK (sound_alarm), &btn_alarm_struct);
  
  button = gtk_builder_get_object (builder, "btn_call");
  g_signal_connect (button, "clicked", G_CALLBACK (process_call), &btn_call_struct);

  button = gtk_builder_get_object (builder, "btn_camera");
  g_signal_connect (button, "clicked", G_CALLBACK (play_music), &btn_play_struct);

  button = gtk_builder_get_object (builder, "btn_quit");
  g_signal_connect (button, "clicked", G_CALLBACK (complicated_quit), NULL);

  logo = gtk_builder_get_object(builder, "tipro_logo_image");
  gtk_image_set_from_file (GTK_IMAGE(logo),"tipro_logo2.png");

  if (window!=NULL)
  {
    // use external .css file for styling the UI 
    css_provider = gtk_css_provider_new();
    if (gtk_css_provider_load_from_path(css_provider, "tipro-demo.css", &error) == 0)
    {
      g_printerr ("Error loading file: %s\n", error->message);
      g_clear_error (&error);
      return 1;
    }
    GdkScreen *screen = gtk_window_get_screen(GTK_WINDOW(window));
    gtk_style_context_add_provider_for_screen(screen, GTK_STYLE_PROVIDER(css_provider), GTK_STYLE_PROVIDER_PRIORITY_APPLICATION);
    gtk_window_fullscreen((GtkWindow*)window);
  }
   
  gtk_main ();

  return 0;
}